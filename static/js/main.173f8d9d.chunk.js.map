{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","marked","value","onClick","bg","style","backgroundColor","className","Board","hl","squares","renderSquare","i","includes","wins","determineWinner","length","a","b","c","determineDraw","next","last","j","left","status","n","filter","s","m","Game","state","history","Array","fill","stepNumber","squareClick","slice","current","setState","jumpTo","step","this","winner","drawn","who","win","moves","map","move","desc","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.173f8d9d.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nconst Square = ({ marked, value, onClick }) => {\n  const bg = marked ? 'orange' : 'transparent';\n  return (\n    <button style={{backgroundColor: bg }} className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Square;","import React from 'react';\nimport './Board.css';\n\nimport Square from './Square';\n\nconst Board = ({ hl, squares, onClick }) => { \n  const renderSquare = i => { \n    const marked = hl ? hl.includes(i) : false;\n    return (\n      <Square marked={marked} value={squares[i]} onClick={() => onClick(i)} />\n    );\n  };\n\n    \n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;","import React from 'react';\nimport './Game.css';\n\nimport Board from './Board';\n\nconst wins = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst determineWinner = squares => {\n  for (let i = 0; i < wins.length; i++) {\n    const [a, b, c] = wins[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {'who': squares[a], 'win': wins[i]};\n    }\n  }\n  return null;\n};\n\nconst determineDraw = (squares, next) => {\n  let left = wins.length;\n  let last, j;  // when there's only one win line left, get its index and content\n  let a, b, c;\n  for (let i = 0; i < wins.length; i++) {\n    [a, b, c] = wins[i];\n    const status = [squares[a], squares[b], squares[c]];\n    if (status.includes('X') && status.includes('O')) {\n      left--;\n    } else {\n      j = i;\n    }\n  }\n  if (left === 1) {\n    [a, b, c] = wins[j];\n    last = [squares[a], squares[b], squares[c]];\n  }\n  const n = last ? (last.filter(s => !s)).length : null;\n  const m = (squares.filter(s => !s)).length;\n  return (\n    left === 0 || (left === 1 && (\n      (n > 1 && m <= 2) || (n === m && !last.includes(next))\n    )));\n};\n\n// ========================================================\n\nclass Game extends React.Component {\n  state = {\n    history: [\n      {\n        squares: Array(9).fill(null),\n        next: 'X'\n      }\n    ],\n    stepNumber: 0 \n  }\n\n  squareClick = i => {\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (determineWinner(squares)   ||  // if there's a winner or a draw no future click\n                        squares[i] ||  // is possible; no double-click on a square\n                        determineDraw(squares, current.next)) {   \n      return;                                                    \n    }\n\n    squares[i] = current.next === 'X' ? 'X' : 'O';\n    this.setState({\n      history: [...history, {\n        squares: squares, \n        next: current.next === 'X' ? 'O' : 'X'\n      }],\n      stepNumber: history.length\n    });\n  }\n\n  jumpTo = step => {\n    this.setState({\n      stepNumber: step\n    });\n  }\n\n  \n\n  render() {\n    const current = this.state.history[this.state.stepNumber];\n    const winner = determineWinner(current.squares);\n    const drawn = determineDraw(current.squares, current.next);\n\n    let status, hl = null;  // hl has the indices of the squares to be highlighted\n    if (winner) {\n      let { who, win } = winner;\n      hl = win;\n      status = 'Winner: ' + who;\n    } else if (!drawn) {\n      status = 'Next player: ' + (current.next === 'X' ? 'X' : 'O');\n    } else {\n      status = 'A draw!';\n    }\n\n    const moves = this.state.history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\"> \n          <Board hl={hl} squares={current.squares} onClick={i => this.squareClick(i)} />\n        </div>\n\n        <div className=\"game-info\"> \n          <div> {status} </div>\n          <ol> {moves} </ol>\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}